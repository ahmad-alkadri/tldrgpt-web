import openai
import streamlit as st


def splittochunk(text: str, max_length: int = 3500) -> list[str]:
    """
    The function "splittochunk" takes a string and splits it into chunks of a specified maximum length,
    returning a list of the resulting chunks.

    @param text A string that needs to be split into chunks of a maximum length specified by the
    max_length parameter.
    @param max_length The maximum length of each chunk of text that the function will split the input
    text into. By default, it is set to 3500 characters.

    @return The function `splittochunk` takes in a string `text` and an integer `max_length` (default
    value of 3500). It then splits the string `text` into chunks of length `max_length` and returns a
    list of these chunks.
    """
    return [text[i : i + max_length] for i in range(0, len(text), max_length)]


def summarize_chunk(chunk: str, max_sentences: int = 2, openaiapi: str = "") -> str:
    """
    This function uses OpenAI's GPT-3 model to summarize a given text into a specified number of
    sentences or less.

    @param chunks The input text that needs to be summarized. It can be a long article or a collection
    of paragraphs or sentences.
    @param max_sentences The maximum number of sentences that the article should be summarized into. If
    not specified, the default value is 7.
    @param openaiapi The `openaiapi` parameter is a string that represents the API key for the OpenAI
    API. This key is used to authenticate and authorize access to the OpenAI API services.

    @return a string that contains a summary of the input chunks, with a maximum of `max_sentences`
    sentences, generated using the OpenAI GPT-3 language model. If there is an error during the process,
    an empty string is returned.
    """
    openai.api_key = openaiapi

    # print("Chunk:")
    # print(chunk)

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            temperature=0.7,
            messages=[
                {
                    "role": "assistant",
                    "content": chunk,
                },
                {
                    "role": "user",
                    "content": f"Summarize the text into exactly {max_sentences} sentences or less.",
                },
            ],
        )

        # print(completion.choices[0].message["content"])
        # print("---")

        return completion.choices[0].message["content"]
    except Exception:
        return ""


@st.cache_data
def summarize_chunks(
    chunks: list[str], max_sentences: int = 2, openaiapi: str = ""
) -> str:
    """
    This function takes a list of text chunks, summarizes each chunk using another function, and returns
    a concatenated string of all the summaries.

    @param chunks a list of strings, where each string represents a chunk of text that needs to be
    summarized.
    @param max_sentences The maximum number of sentences to include in each summary. If not specified,
    the default value is 7.
    @param openaiapi The `openaiapi` parameter is a string that represents the API key for the OpenAI
    API. This API can be used for natural language processing tasks such as text summarization, language
    translation, and more. If a valid API key is provided, the `summarize_chunk` function within

    @return The function `summarize_chunks` returns a string that is the concatenation of the summaries
    of each chunk in the input list of strings. The summaries are generated by calling the function
    `summarize_chunk` with the specified parameters.
    """

    list_summaries = []

    for chunk in chunks:
        list_summaries.append(summarize_chunk(chunk, max_sentences, openaiapi))

    return " ".join(list_summaries)
